"""
Django settings for ecommerce project.

Generated by 'django-admin startproject' using Django 3.0.7.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '1g6q%!tyz4)9dye5*$0amaa(bqn9=i9+4p7^%220vjpo$$u@ae'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []

# Application definition

INSTALLED_APPS = [
	'customer',
	'easy_thumbnails',
	'easy_thumbnails.optimize',
	'filer',
	'mptt',  # for filer
	'payment',
	'rest_framework',
	'shop',
	'django.contrib.admin',
	'django.contrib.auth',
	'django.contrib.contenttypes',
	'django.contrib.sessions',
	'django.contrib.messages',
	'django.contrib.staticfiles',
]

MIDDLEWARE = [
	'django.middleware.security.SecurityMiddleware',
	'django.contrib.sessions.middleware.SessionMiddleware',
	'django.middleware.common.CommonMiddleware',
	'django.middleware.csrf.CsrfViewMiddleware',
	'django.contrib.auth.middleware.AuthenticationMiddleware',
	'django.contrib.messages.middleware.MessageMiddleware',
	'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'ecommerce.urls'

TEMPLATES = [
	{
		'BACKEND': 'django.template.backends.django.DjangoTemplates',
		'DIRS': [],
		'APP_DIRS': True,
		'OPTIONS': {
			'context_processors': [
				'django.template.context_processors.debug',
				'django.template.context_processors.request',
				'django.contrib.auth.context_processors.auth',
				'django.contrib.messages.context_processors.messages',
			],
		},
	},
]

WSGI_APPLICATION = 'ecommerce.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases

DATABASES = {
	'default': {
		'ENGINE': 'django.db.backends.sqlite3',
		'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
	}
}


# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
	{
		'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
	},
	{
		'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
	},
	{
		'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
	},
	{
		'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
	},
]


# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = False  # no translation support

USE_L10N = True  # Datetime format to local

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

STATIC_URL = '/static/'


# SESSIONS

SESSION_ENGINE = 'django.contrib.sessions.backends.cached_db'
# SESSION_SAVE_EVERY_REQUEST = True

############################################
# DJANGO FILER

FILER_ADMIN_ICON_SIZES = ('16', '32', '48', '80', '128')
FILER_ALLOW_REGULAR_USERS_TO_ADD_ROOT_FOLDERS = True
FILER_DUMP_PAYLOAD = False
FILE_UPLOAD_MAX_MEMORY_SIZE = 5242880
THUMBNAIL_HIGH_RESOLUTION = False
THUMBNAIL_PRESERVE_EXTENSIONS = True

THUMBNAIL_PROCESSORS = (
	'easy_thumbnails.processors.colorspace',
	'easy_thumbnails.processors.autocrop',
	'filer.thumbnail_processors.scale_and_crop_with_subject_location',
	'easy_thumbnails.processors.filters',
)

################################################################################
# GENERAL

MAX_PURCHASE_QUANTITY = 99  # used in shop.managers.Availability
USE_THOUSAND_SEPARATOR = True
DEFAULT_CURRENCY = 'USD'  # only used if no currency is provided to field
DEFAULT_TAX_RATE = 13  # tax rate as an int

"""
When rendering an amount of type Money, use this format.
Possible placeholders are:
* ``{symbol}``: This is replaced by €, $, £, etc.
* ``{currency}``: This is replaced by Euro, US Dollar, Pound Sterling, etc.
* ``{code}``: This is replaced by EUR, USD, GBP, etc.
* ``{amount}``: The localized amount.
* ``{minus}``: Only for negative amounts, where to put the ``-`` sign.

For further information about formatting currency amounts, refer to
https://docs.microsoft.com/en-us/globalization/locale/currency-formatting
"""
MONEY_FORMAT = '{symbol} {minus}{amount}'  # eg.= '$ -2.00'


@property
def CART_MODIFIERS(self):
	"""
	Specifies the list of `cart-modifiers`. They are applied on	each cart item
	and the cart final sums.

	This list must start with `'shop.modifiers.defaults.DefaultCartModifier'`
	as its first entry, followed by other optional cart modifiers.

	Returns a list classes [ '[..].Class1', '[..].Class2', ... ] dynamically
	imported by DJango
	"""
	from django.utils.module_loading import import_string

	cart_modifiers = [
		'shop.modifiers.DefaultCartModifier',  # basic subtotal calculator
		'shop.modifiers.CartIncludeTaxModifier',  # add tax rate
		# 'shop.modifiers.CartExcludedTaxModifier',  # tax already included
		'payment.modifiers.PaymentCartModifier',  # currently does nothing
	]
	return [import_string(mc) for mc in cart_modifiers]


@property
def ORDER_WORKFLOWS(self):
	"""
	Specifies a list of `order-workflows`. Order workflows are applied after an
	order has been created and conduct the vendor through the steps of receiving
	the payments until fulfilling the shipment.

	Returns a list classes [ '[..].Class1', '[..].Class2', ... ] dynamically
	imported by DJango
	"""
	from django.utils.module_loading import import_string

	order_workflows = [
		'shop.payment.workflows.ManualPaymentWorkflowMixin',
		'shop.payment.workflows.CancelOrderWorkflowMixin',
		'shop.shipping.workflows.PartialDeliveryWorkflowMixin',
		# 'shop_paypal.payment.OrderWorkflowMixin',
		# 'shop_stripe.workflows.OrderWorkflowMixin',
	]
	return [import_string(mc) for mc in order_workflows]